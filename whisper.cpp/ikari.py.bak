import sounddevice as sd
import scipy.io.wavfile as wav
import subprocess
import tempfile
import os
import sys

MODEL_PATH = "models/ggml-tiny.en.bin"
WHISPER_CLI_PATH = "/home/pluto/Ikari/whisper.cpp/build/bin/whisper-cli"

def record_audio(duration=5, fs=16000):
    print("Say your command now...")
    audio = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16')
    sd.wait()
    return audio, fs

def save_wav(audio, fs, filename):
    wav.write(filename, fs, audio)

def transcribe_audio(filename):
    cmd = [WHISPER_CLI_PATH, "-m", MODEL_PATH, "-f", filename, "-nt", "-ovtt", "0"]
    result = subprocess.run(cmd, capture_output=True, text=True)
    print("Whisper CLI stdout:", repr(result.stdout))
    print("Whisper CLI stderr:", repr(result.stderr))
    if result.returncode != 0:
        print(f"Whisper CLI exited with error code {result.returncode}")
    lines = result.stdout.splitlines()
    for line in lines:
        if line.strip():
            return line.strip()
    return ""

def main():

    audio, fs = record_audio(duration=3)
    print("Audio data sample:", audio[:10])
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tf:
        save_wav(audio, fs, tf.name)
        command = transcribe_audio(tf.name)
    os.unlink(tf.name)  # clean temp file

    print(f"Recognized command: {command}")
    
    command = command.lower()

    if "open" in command and "text" in command:
        print("Opening neovim for you...")
        subprocess.Popen(
            ["kitty", "nvim"],
            start_new_session=True,
            stdin=subprocess.DEVNULL,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    elif "open" in command and "kitty" in command or "terminal" in command:
        print("Opening kitty terminal...")
        subprocess.Popen(
            ["kitty"],
            start_new_session=True,
            stdin=subprocess.DEVNULL,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    else:
        print("Command not recognized or unsupported.")
    
    if "please" in command:
        print("your welcome")

if __name__ == "__main__":
    main()
